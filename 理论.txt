封装格式:视频数据和音频数据打包成一个文件的规范,如avi，rmvb，mp4，flv，mkv等
网络上的数据--解协议变成封装格式数据--解封装变成音频压缩数据、视频压缩数据--解压缩--原始音频、视频数据--音频、视频同步

视频数据如果不编码，数据量会很大，一部电影可能就要上百G的空间
点播服务普遍采用了HTTP作为流媒体协议，MP4，FLV，F4V等作为封装格式，H.264作为视频编码格式，AAC作为音频编码格式
直播服务普遍采用了RTMP作为流媒体协议，FLV作为封装格式，H.264作为视频编码格式，AAC作为音频编码格式

以4：2：2的采样频率为例，Y信号采用13.5MHz，色度信号U和V采用6.75MHz采样，采样信号以8bit量化，则可以计算出
数字视频的码率为：13.5*8 + 6.75*8 + 6.75*8= 216Mbit/s如此大的数据量如果直接进行存储或传输将会遇到很大困
难，因此必须采用压缩技术以减少码率

一套双声道数字音频若取样频率为44.1KHz，每样值按16bit量化，则其码率为：2*44.1kHz*16bit=1.411Mbit/s
-----------------------------------------------------------------------------------------------------------------------
如果YUV视频帧的宽和高分别为w和h，那么一帧YUV420P像素数据一共占用w*h*3/2 Byte的数据。其中前w*h Byte存储Y，
接着的w*h*1/4 Byte存储U，最后w*h*1/4 Byte存储V。即若Y占一字节，则U/V各占0.25字节
lena_256x256_yuv420p.yuv是分辨率为256*256，分离后Y数据为256*256，但U/V是128*128		YUV420P
lena_256x256_yuv444p.yuv是分辨率为256*256，分离后Y数据为256*256，但U/V还是256*256	YUV444P

将亮度分量Y的数值减半的方法，降低图像的亮度
如果想把YUV格式像素数据变成灰度图像,只需要将U、V分量设置成128即可

RGB24文件中R，G，B各占一个字节
分辨率为500x500的名称为cie1931_500x500.rgb的RGB24格式的像素数据文件分离成为三个文件：
output_r.y：R数据，分辨率为256x256。
output_g.y：G数据，分辨率为256x256。
output_b.y：B数据，分辨率为256x256。

bitmapFileHead+bitmapInfoHead+B+G+R=BMP

Y= 0.299*R+0.587*G+0.114*B
U=-0.147*R-0.289*G+0.463*B
V= 0.615*R-0.515*G-0.100*B
------------------------------------------------------------------------------------------------------------------------
PCM音频数据可以使用音频编辑软件导入查看，如Audacity
声音样值的采样频率44100Hz很常见，PCM16LE格式的采样数据的取值范围是-32768到32767，而PCM8格式的采样数据的取值范围是0到255
PCM16LE双声道数据中左声道和右声道的采样值是间隔存储的。每个采样值占用2Byte空间，16表示一个采样值16位，LE表示小端模式

将采样值大小减小一半，音量大小即减小一半
只采样每个声道奇数点的样值，这样处理完成后，原本22秒左右的音频变成了11秒左右。
音频的播放速度提高了2倍，音频的音调也变高了很多

PCM16LE转换到PCM8需要经过两个步骤：采样值右移8位，由16位变8位，然后再加128由有符号数变无符号数

wav=WAVE_HEADER+WAVE_FMT+WAVE_DATA+PCM数据
------------------------------------------------------------------------------------------------------------------------
视频裸流为H.264原始码流，是由一个一个的NALU组成的。
H.264的nalu起始码分成两种：0x000001（3Byte）或者0x00000001（4Byte）,关键帧为0x67,0x68,0x65
------------------------------------------------------------------------------------------------------------------------
音频裸流为AAC原始码流，是由一个一个的ADTS frame组成的。
每个ADTS frame之间通过syncword（同步字）进行分隔，同步字为0x0FFF。AAC码流解析的步骤就是首先从码流中搜索0x0FFF，
分离出ADTS frame；然后再分析ADTS frame的首部各个字段
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------